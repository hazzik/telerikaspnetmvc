<?xml version="1.0" encoding="utf-8"?>
<topic id="55313146-9B84-40d3-9282-048BB569BE17" revisionNumber="1">
  <developerWalkthroughDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
    <introduction>
      <para>
      		This topic shows how to use jQuery UI MessageBox component in an <token>Mvc</token>
      		application. 
      </para>
      <autoOutline lead="none" />
    </introduction>
    <prerequisites>
    	<content>
    		Before proceeding make sure that:
    		<list class="bullet">
    			<listItem>
    				You have all the <link xlink:href="3e4595a7-3c2f-429d-8cdd-a3c638417369">required components</link> installed.
    			</listItem>
    			<listItem>
    				Make sure that your <token>Mvc</token> project refers the <link xlink:href="45f9dbed-12d3-483e-a244-8dfc5f7c3ba8"><token>TelerikMvcDll</token></link>
    				and <link xlink:href="0e611471-2c62-4f18-a5a6-508fdd93f801"><token>jQueryUIDll</token></link> assemblies.
    			</listItem>
    			<listItem>
    				The <localUri><token>jQueryUICss</token></localUri> should be included in the <codeInline>&lt;head&gt;</codeInline>
    				tag of your master page. This is outlined in <link xlink:href="0e611471-2c62-4f18-a5a6-508fdd93f801#jQueryUICss">here</link>
    			</listItem>
    			<listItem>
    				All jQuery UI components require a valid ScriptRegistrar definition. Adding a ScriptRegistrar is described 
    				<link xlink:href="0e611471-2c62-4f18-a5a6-508fdd93f801#Registrar">here</link>
    			</listItem>
    		</list>
		</content>
    </prerequisites>
    <section address="Definition">
    	<title>MessageBox definition</title>
    	<content>
    		<para>
    		The <codeEntityReference autoUpgrade="true">T:Mvc.UI.jQuery.MessageBox</codeEntityReference> component is used to show nice looking message box 
    		to user which fully complant with the jQuery UI themeing . The following shows how to setup a message box:
    		</para>
    		<code lang="C#">    		
    		<![CDATA[
                <% 
  				     Html.jQuery().MessageBox()
                         .Name("info")
                         .MessageType(MessageBoxType.Info)
                         .Content(() =>
                                        {%>
                                            <strong>Hey!</strong> this info message box.
                                        <%}
                                  )
                         .Render();
                %>
    		]]>
    		</code>
    		<para>
    			And now the explanation of that code:
    		</para>
    		<list class="bullet">
    			<listItem>
    				The <codeEntityReference autoUpgrade="true">M:Telerik.Web.Mvc.UI.ViewComponentBuilderBase`2.Name(System.String)</codeEntityReference> method is used
    				to specify the unique name of the MessageBox which is later output as the id HTML
    				attribute and used by jQuery UI. Setting the name is mandatory and exception would be thrown
    				otherwise.
    			</listItem>
    			<listItem>
    				The <codeEntityReference autoUpgrade="true">M:Mvc.UI.jQuery.MessageBoxBuilder.MessageType(Mvc.UI.jQuery.MessageBoxType)</codeEntityReference> method is used
    				to specify the type of MessageBox. Currently there are two kinds of message <codeEntityReference autoUpgrade="true">F:Mvc.UI.jQuery.MessageBoxType.Info</codeEntityReference>
    				and <codeEntityReference autoUpgrade="true">F:Mvc.UI.jQuery.MessageBoxType.Error</codeEntityReference>.
    			</listItem>
    			<listItem>
    				The <codeEntityReference autoUpgrade="true">M:Mvc.UI.jQuery.MessageBoxBuilder.Content(System.Action)</codeEntityReference> method is used
    				to specify the raw HTML markup of MessageBox.
    			</listItem>    			
    			<listItem>
    		    	Finally the <codeEntityReference autoUpgrade="true">M:Telerik.Web.Mvc.UI.ViewComponentBuilderBase`2.Render</codeEntityReference> method
    				outputs the HTML of the MessageBox component.
    				<alert class="important">
    					It is mandatory that the <codeInline>Render</codeInline> method is called. If not
    					the component will not output any HTML.
    				</alert>
    			</listItem>
    		</list>
    	</content>
    </section>
    <relatedTopics>
    	<link xlink:href="0e611471-2c62-4f18-a5a6-508fdd93f801"/>
      	<link xlink:href="8f4a4331-5bf2-467f-ae04-f5901cecf880"/>
      	<link xlink:href="FF4218F7-2E35-44e2-829B-6299E18385D5"/>
      	<link xlink:href="80c59d42-014f-4dac-8234-3e5e980ba15d"/>
      	<link xlink:href="4BC1FD9D-A3B6-4c2f-B7D0-901A7881726C"/>
      	<link xlink:href="1BCB7F42-8D1A-4415-AE7E-599E009D3B82"/>
    </relatedTopics>    
  </developerWalkthroughDocument>
</topic>