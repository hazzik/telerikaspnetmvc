<?xml version="1.0" encoding="utf-8"?>
<topic id="8f4a4331-5bf2-467f-ae04-f5901cecf880" revisionNumber="1">
  <developerWalkthroughDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
  	 <introduction>
      <para>
      		This topic shows how to use Accordion jQuery UI component in an <token>Mvc</token>
      		application.
      		<autoOutline lead="none" />
      </para>
    </introduction>
    <prerequisites>
    	<content>
    		Before proceeding make sure that:
    		<list class="bullet">
    			<listItem>
    				You have all the <link xlink:href="3e4595a7-3c2f-429d-8cdd-a3c638417369">required components</link> installed.
    			</listItem>
    			<listItem>
    				Make sure that your <token>Mvc</token> project refers the <link xlink:href="45f9dbed-12d3-483e-a244-8dfc5f7c3ba8"><token>TelerikMvcDll</token></link>
    				and <link xlink:href="0e611471-2c62-4f18-a5a6-508fdd93f801"><token>jQueryUIDll</token></link> assemblies.
    			</listItem>
    			<listItem>
    				The <localUri><token>jQueryUICss</token></localUri> should be included in the <codeInline>&lt;head&gt;</codeInline>
    				tag of your master page. This is outlined in <link xlink:href="0e611471-2c62-4f18-a5a6-508fdd93f801#jQueryUICss">here</link>
    			</listItem>
    			<listItem>
    				All jQuery UI components require a valid ScriptRegistrar definition. Adding a ScriptRegistrar is described 
    				<link xlink:href="0e611471-2c62-4f18-a5a6-508fdd93f801#Registrar">here</link>
    			</listItem>
    		</list>
		</content>
    </prerequisites>
    
    <section address="Definition">
    	<title>Accordion definition</title>
    	<content>
    		<para>
    		The <codeEntityReference autoUpgrade="true">T:Mvc.UI.jQuery.Accordion</codeEntityReference>
    		is made of <codeEntityReference autoUpgrade="true">T:Mvc.UI.jQuery.AccordionItem</codeEntityReference> objects
    		which represent the headers of the collapsible content. Here is how to define a simple Accordion
    		with two items:
    		</para>
    		<code lang="C#">
    		<![CDATA[
			<%
                Html.jQuery().Accordion()
                    .Name("Accordion")
                    .Items(parent => {
                        parent
                            .Add()
                            .Text("First Item")
                            .Content(() => {%>
                                   <strong>First Item's content</strong>
                            <%});
                        
                        parent
                            .Add()
                            .Text("Second Item")
                            .Content(() => {%>
                                   <strong>Second Item's content</strong>
                            <%});
                        }
                    )
                    .Render();
             %>
    		]]>
    		</code>
    		<para>
    			And now the explanation of that code:
    		</para>
    		<list class="bullet">
    			<listItem>
    				The <codeEntityReference autoUpgrade="true">M:Telerik.Web.Mvc.UI.ViewComponentBuilderBase`2.Name(System.String)</codeEntityReference> is used
    				to specify the unique name of the Accordion control which is later output as the id HTML
    				attribute and used by jQuery UI. Setting the name is mandatory and exception would be thrown
    				otherwise.
    			</listItem>
    			<listItem>
    				The <codeEntityReference autoUpgrade="true">M:Mvc.UI.jQuery.AccordionBuilder.Items(System.Action{Mvc.UI.jQuery.AccordionItemFactory})</codeEntityReference> method
    				is used to define the items of the Accordion component. It accepts a single argument - 
    				<codeInline>Action&lt;AccordionItemFactory&gt;</codeInline>. That action builds the items.
    			</listItem>
    			<listItem>
    				The <codeEntityReference autoUpgrade="true">M:Mvc.UI.jQuery.AccordionItemFactory.Add</codeEntityReference> method
    				adds a new AccordionItem to the Accordion component.
    			</listItem>
    			<listItem>
    				The <codeEntityReference autoUpgrade="true">M:Mvc.UI.jQuery.AccordionItemBuilder.Text(System.String)</codeEntityReference> method
    				sets the text displayed by the AccordionItem.
    			</listItem>
    			<listItem>
    				The <codeEntityReference autoUpgrade="true">M:Mvc.UI.jQuery.AccordionItemBuilder.Content(System.Action)</codeEntityReference> method
    				is used to specify the content of the AccordionItem.
    			</listItem>
    			<listItem>
    				Finally the <codeEntityReference autoUpgrade="true">M:Telerik.Web.Mvc.UI.ViewComponentBuilderBase`2.Render</codeEntityReference> method
    				outputs the HTML of the Accordion component.
    				<alert class="important">
    					It is mandatory that the <codeInline>Render</codeInline> method is called. If not
    					the component will not output any HTML.
    				</alert>
    			</listItem>
    		</list>
    	</content>
    </section>
    <section address="Animation">
    	<title>
    	 	Expand and collapse animation
    	</title>
    	<content>
    		You can customize the animation used to expand and collapse the items.
			<procedure>
				<steps class="ordered">
				<step>
					<content>
						Add the <localUri><token>jQueryEasingJavaScript</token></localUri> JavaScript file in the Scripts folder
						of your <token>Mvc</token> application:
						<list class="bullet">
		        			<listItem>
		        				Right click the "Scripts" folder in Solution Explorer and choose <ui>Add Existing Item</ui>
		        			</listItem>
		        			<listItem>Browse to the location where you extracted the <token>TelerikMvc</token> zip file. In case you have chosen
					  		the suggested location this would be <token>InstallationLocation</token>. Open the <localUri>Examples\Mvc.UI.jQuery.Examples\Scripts</localUri>
							</listItem>
							<listItem>
								Select the <localUri><token>jQueryEasingJavaScript</token></localUri> and click the <ui>Add</ui> button:
								<mediaLink><image xlink:href="jQueryEasingScript"/></mediaLink>
							</listItem>
						</list>
					</content>
				</step>
				<step>
					<content>
						Include the <localUri><token>jQueryEasingJavaScript</token></localUri>:
						<code lang="C#">
						<![CDATA[
			    		<%
			    			Html.Telerik().ScriptRegistrar().Scripts(
			                        scripts => scripts.Add("~/Scripts/jquery.easing.1.3.js")
			                    )
			    				.Render();
			    		%>
						]]>
						</code>
					</content>
				</step>
				<step>
					<para>
					Use the <codeEntityReference autoUpgrade="true">M:Mvc.UI.jQuery.AccordionBuilder.Animation</codeEntityReference>
					method to specify the type of animation to use. 
					</para>
					<code lang="C#">
					<![CDATA[
			            <%
			                Html.jQuery().Accordion()
			                    .Name("Accordion")
			                    .Animate("easeOutQuad")
			                    .Items(parent => {
			                        parent
			                            .Add()
			                            .Text("First Item")
			                            .Content(() => {%>
			                                   <strong>First Item's content</strong>
			                            <%});
			                        
			                        parent
			                            .Add()
			                            .Text("Second Item")
			                            .Content(() => {%>
			                                   <strong>Second Item's content</strong>
			                            <%});
			                        }
			                    )
			                    .Render();
			             %>
					]]>
					</code>
					<para>
					The availble options are:
					<list class="bullet">
						<listItem>easeInQuad</listItem>
						<listItem>easeOutQuad</listItem>
						<listItem>easeInOutQuad</listItem>
						<listItem>easeOutCubic</listItem>
						<listItem>easeInQuart</listItem>
						<listItem>easeOutQuart</listItem>
						<listItem>easeInOutQuart</listItem>
						<listItem>easeInQuint</listItem>
						<listItem>easeOutQuint</listItem>
						<listItem>easeInOutQuint</listItem>
						<listItem>easeOutSine</listItem>
    					<listItem>easeInOutSine</listItem>
					    <listItem>easeInExpo</listItem>
						<listItem>easeOutExpo</listItem>
					    <listItem>easeInOutExpo</listItem>
					    <listItem>easeInCirc</listItem>
					    <listItem>easeOutCirc</listItem>
					    <listItem>easeInOutCirc</listItem>
					    <listItem>easeInElastic</listItem>
					    <listItem>easeOutElastic</listItem>
					    <listItem>easeInOutElastic</listItem>
					    <listItem>easeInBack</listItem>
					    <listItem>easeOutBack</listItem>
					    <listItem>easeInOutBack</listItem>
					    <listItem>easeInBounce</listItem>
					    <listItem>easeOutBounce</listItem>
					    <listItem>easeInOutBounce</listItem>
					</list>
					</para>
				</step>
				</steps>
			</procedure>
    	</content>
    </section>
    <section address="Selection">
    	<title>Selecting items</title>
    	<content>
    		By default the first item in the Accordion will be selected and expanded. You can control
    		what the selected item is by using the <codeEntityReference autoUpgrade="true">M:Mvc.UI.jQuery.AccordionItemBuilder.Selected</codeEntityReference> 
    		method:
    		<code lang="C#">
            <![CDATA[
            <%
                Html.jQuery().Accordion()
                    .Name("Accordion")
                    .Animate("easeOutQuad")
                    .Items(parent => {
                        parent
                            .Add()
                            .Text("First Item")
                            .Content(() => {%>
                                   <strong>First Item's content</strong>
                            <%});
                        
                        parent
                            .Add()
                            .Selected(true)
                            .Text("Second Item")
                            .Content(() => {%>
                                   <strong>Second Item's content</strong>
                            <%});
                        }
                    )
                    .Render();
             %>
             ]]>
    		</code>
    	</content>
    </section>
    <section address="Accordion">
    	<title>Accordion behavior</title>
    	<content>
    		You can use the following methods in order to control the visual behavior
    		of the Accordion component:
    		<list class="bullet">
    			<listItem>
    				<codeEntityReference autoUpgrade="true">M:Mvc.UI.jQuery.AccordionBuilder.AutoHeight</codeEntityReference> controls
    				whether to automatically size the Accordion. By default this is set to <codeInline>true</codeInline> 
    				which means that the highest content part is used as height reference for all other parts. To disable
    				this behavior set it to <codeInline>false</codeInline>:
    				<code lang="C#">
    					<![CDATA[
    					<%
    					    Html.jQuery().Accordion()
    					        .Name("Accordion")
    					        .AutoHeight(false) /* disable auto height*/
    					        .Items(parent=>{ /*item definition */})
    					        .Render();
    					%>
    					]]>
    				</code>
    			</listItem>
    			<listItem>
    				<codeEntityReference autoUpgrade="true">M:Mvc.UI.jQuery.AccordionBuilder.OpenOn</codeEntityReference> specifies
    				the DOM event on which the items will open. By default is set to "click". Here is how to
    				override that:
    				<code lang="C#">
    					<![CDATA[
    					<%
    					    Html.jQuery().Accordion()
    					        .Name("Accordion")
    					        .OpenOn("mouseover") /* the item will open when the user hovers it with the mouse */
    					        .Items(parent=>{ /*item definition */})
    					        .Render();
    					%>
    					]]>
    				</code>
    			</listItem>
    			<listItem>
    				<codeEntityReference autoUpgrade="true">M:Mvc.UI.jQuery.AccordionBuilder.CollapsibleContent</codeEntityReference> specifies
    				whether the user can collapse all items. By default this is set to <codeInline>false</codeInline> which
    				means that one item always stays open. You can override that like this:
    				<code lang="C#">
    					<![CDATA[
    					<%
    					    Html.jQuery().Accordion()
    					        .Name("Accordion")
    					        .CollapsibleContent(true) /*allow collapse of all items*/
    					        .Items(parent=>{ /*item definition */})
    					        .Render();
    					%>
    					]]>
    				</code>
    			</listItem>
    		</list>
    	</content>
    </section>
    <section address="ClientEvents">
    	<title>Client-side events</title>
    	<content>
    		The Accordion jQuery UI component exposes the <codeInline>onchange</codeInline> client-side event
    		which occurs when the user selects a new item. You can handle that event by using the
    		<codeEntityReference autoUpgrade="true">M:Mvc.UI.jQuery.AccordionBuilder.OnChange</codeEntityReference> method:
    		<code lang="C#">
    		<![CDATA[
    		<%
    		     Html.jQuery().Accordion()
    		         .Name("Accordion")
    		         .Items(parent=>{ /*item definition */})
    		         .OnChange(()=>{%>
    		                function (event, ui) {
    		               		alert("Selected: " + ui.newHeader.text());
    		              }
    		          <%
    		          })
                     .Render();
    		%>
    		]]>
    		</code>
    		You can also specify the name of an existing JavaScript function:
    		<code lang="JavaScript">
    			<![CDATA[
    			<script type="text/javascript">
    			function onChangeHandler(event, ui) {
    				alert("Selected: " + ui.newHeader.text());
    			}
    			</script>
    			]]>
    		</code>
    		<code lang="C#">
    		<![CDATA[
    		<%
    		     Html.jQuery().Accordion()
    		         .Name("Accordion")
    		         .Items(parent=>{ /*item definition */})
    		         .OnChange(()=>{%> onChangeHandler <%}) /* call the "onChangeHandler" */
                     .Render();
    		%>
    		]]>
    		</code>
    	</content>
    </section>
    <relatedTopics>
    	<link xlink:href="0e611471-2c62-4f18-a5a6-508fdd93f801"/>
      	<link xlink:href="FF4218F7-2E35-44e2-829B-6299E18385D5"/>
      	<link xlink:href="55313146-9B84-40d3-9282-048BB569BE17"/>
      	<link xlink:href="80c59d42-014f-4dac-8234-3e5e980ba15d"/>
      	<link xlink:href="4BC1FD9D-A3B6-4c2f-B7D0-901A7881726C"/>
      	<link xlink:href="1BCB7F42-8D1A-4415-AE7E-599E009D3B82"/>
    </relatedTopics>
  </developerWalkthroughDocument>
</topic>