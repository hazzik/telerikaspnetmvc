<?xml version="1.0" encoding="utf-8"?>
<topic id="FF4218F7-2E35-44e2-829B-6299E18385D5" revisionNumber="1">
  <developerWalkthroughDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
    <introduction>
      <para>
      		This topic shows how to use DatePicker jQuery UI component in an <token>Mvc</token>
      		application. 
      </para>
      <autoOutline lead="none" />
    </introduction>
    <prerequisites>
    	<content>
    		Before proceeding make sure that:
    		<list class="bullet">
    			<listItem>
    				You have all the <link xlink:href="3e4595a7-3c2f-429d-8cdd-a3c638417369">required components</link> installed.
    			</listItem>
    			<listItem>
    				Make sure that your <token>Mvc</token> project refers the <link xlink:href="45f9dbed-12d3-483e-a244-8dfc5f7c3ba8"><token>TelerikMvcDll</token></link>
    				and <link xlink:href="0e611471-2c62-4f18-a5a6-508fdd93f801"><token>jQueryUIDll</token></link> assemblies.
    			</listItem>
    			<listItem>
    				The <localUri><token>jQueryUICss</token></localUri> should be included in the <codeInline>&lt;head&gt;</codeInline>
    				tag of your master page. This is outlined in <link xlink:href="0e611471-2c62-4f18-a5a6-508fdd93f801#jQueryUICss">here</link>
    			</listItem>
    			<listItem>
    				All jQuery UI components require a valid ScriptRegistrar definition. Adding a ScriptRegistrar is described 
    				<link xlink:href="0e611471-2c62-4f18-a5a6-508fdd93f801#Registrar">here</link>
    			</listItem>
    		</list>
		</content>
    </prerequisites>
    <section address="Definition">
    	<title>DatePicker definition</title>
    	<content>
    		<para>
    		The <codeEntityReference>T:Mvc.UI.jQuery.DatePicker</codeEntityReference> component
    		is used to attach a popup calendar to a HTML text field. The following shows the basic
    		usage:
    		</para>
    		<code lang="C#">
    		<![CDATA[
                <% 
  				     Html.jQuery().DatePicker()
                         .Name("birthDate")
                         .Render(); 
                %>
    		]]>
    		</code>
    		<para>
    			And now the explanation of that code:
    		</para>
    		<list class="bullet">
    			<listItem>    				
    				The <codeEntityReference autoUpgrade="true">M:Telerik.Web.Mvc.UI.ViewComponentBuilderBase`2.Name(System.String)</codeEntityReference> method is used
    				to specify the unique name of the DatePicker component which is later output as the id HTML
    				attribute and used by jQuery UI. Setting the name is mandatory and exception would be thrown
    				otherwise.    				
    			</listItem>
    			<listItem>
    		    	Finally the <codeEntityReference autoUpgrade="true">M:Telerik.Web.Mvc.UI.ViewComponentBuilderBase`2.Render</codeEntityReference> method
    				outputs the HTML of the DatePicker component.
    				<alert class="important">
    					It is mandatory that the <codeInline>Render</codeInline> method is called. If not
    					the component will not output any HTML.
    				</alert>
    			</listItem>
    		</list>
    	</content>
    </section>
    <section address="SettingShowingValue">
    	<title>Setting value</title>
    	<content>
    	To set a value use the <codeEntityReference autoUpgrade="true">M:Mvc.UI.jQuery.DatePickerBuilder.Value(System.DateTime)</codeEntityReference>,
    	If value is not set explicitly, the calendar will show the current date as selected date. The following shows the code how
    	to set the value:
		<code lang="C#">
		<![CDATA[
        	<% 
		        Html.jQuery().DatePicker()
                    .Name("birthDate")
                    .Value(DateTime.Today.AddYears(-25))
                    .Render(); 
            %>
		]]>
		</code>
		</content>
    </section>
    <section address="Format">
    	<title>Formatting Date</title>
    	<content>
    	To format the value that will be shown in the HTML text input use the <codeEntityReference autoUpgrade="true">M:Mvc.UI.jQuery.DatePickerBuilder.DateFormat(System.String)</codeEntityReference>
    	method. The following shows how to format the date:
		<code lang="C#">
		<![CDATA[
        	<% 
		        Html.jQuery().DatePicker()
                    .Name("birthDate")
                    .DateFormat("mm-dd-yy")
                    .Render(); 
            %>
		]]>
		</code>
		</content>
    </section>    
    <section address="InputRestriction">
    	<title>Restricting User Input</title>
    	<content>
    	To restrict the user input use the <codeEntityReference autoUpgrade="true">M:Mvc.UI.jQuery.DatePickerBuilder.MinimumValue(System.DateTime)</codeEntityReference>,
    	<codeEntityReference autoUpgrade="true">M:Mvc.UI.jQuery.DatePickerBuilder.MaximumValue(System.DateTime)</codeEntityReference>, dates outside of this range will
    	be grayed out. Use the <codeEntityReference autoUpgrade="true">M:Mvc.UI.jQuery.DatePickerBuilder.ConstrainInput(System.Boolean)</codeEntityReference> to restrict
    	the keyboard keys which is by default set to <codeInline>true</codeInline>.
		<alert class="important">
			Do not depends upon these settings completely. Always do the server side validation.
		</alert>
		<para>The following shows the code how to set minimum and maximum value:</para>
    	<code lang="C#">
    	<![CDATA[
            <% 
  				Html.jQuery().DatePicker()
                    .Name("meetingDate")
                    .MinimumValue(DateTime.Today.AddDays(1))
                    .MaximumValue(DateTime.Today.AddMonths(1))
                    .Render(); 
            %>
    	]]>
		</code>    		
		</content>
    </section>
    <section address="ShowingDropDownList">
    	<title>Showing Month and Year DropDownList</title>
    	<content>
    	To show month and year DropDownList, use the <codeEntityReference autoUpgrade="true">M:Mvc.UI.jQuery.DatePickerBuilder.AllowMonthChange(System.Boolean)</codeEntityReference>
    	and <codeEntityReference autoUpgrade="true">M:Mvc.UI.jQuery.DatePickerBuilder.AllowYearChange(System.Boolean)</codeEntityReference> methods.
		<para>The following shows the code how to setup it:</para>
    	<code lang="C#">
    	<![CDATA[
            <% 
  				Html.jQuery().DatePicker()
                    .Name("releaseDate")
                    .AllowMonthChange(true)
                    .AllowYearChange(true)
                    .Render(); 
            %>
    	]]>
		</code>    		
		</content>
    </section>
    <section address="PopulatingAlternate">
    	<title>Populating Alternate Field</title>
    	<content>
    	Sometime it is necessary to show user the date in a specific format, while using a different format in form submit, in those sceneraio
    	you can use the <codeEntityReference autoUpgrade="true">M:Mvc.UI.jQuery.DatePickerBuilder.AlternateField(System.String)</codeEntityReference> and 
    	<codeEntityReference autoUpgrade="true">M:Mvc.UI.jQuery.DatePickerBuilder.AlternateFieldFormat(System.String)</codeEntityReference> methods.
		<para>The following shows the code how to setup a hidden field to use as a alternate field:</para>
    	<code lang="C#">
    	<![CDATA[
            <% using(Html.BeginForm()){%>    	
            <% 
  				Html.jQuery().DatePicker()
                    .Name("releaseDate")
                    .DateFormat("DD, d MM, yy")
                    .AlternateField("#hiddenDate")
                    .AlternateFieldFormat("mm/dd/yy")
                    .Render(); 
            %>
            <%= Html.Hidden("hiddenDate") %>
            <% } %>
    	]]>
		</code>    		
		</content>
    </section>        
    <section address="AssociateButton">
    	<title>Attach Custom Button</title>
    	<content>
		By default the popup calendar is shown when the HTML text field receives focus, you can also add a button to show the calendar
		when the user clicks it. To show the additional button use the <codeEntityReference autoUpgrade="true">M:Mvc.UI.jQuery.DatePickerBuilder.ShowOn(Mvc.UI.jQuery.DatePickerShowOn)</codeEntityReference> method.
		Use the <codeEntityReference autoUpgrade="true">F:Mvc.UI.jQuery.DatePickerShowOn.Button</codeEntityReference> if you want the calendar to appear when the button is clicked or
		<codeEntityReference autoUpgrade="true">F:Mvc.UI.jQuery.DatePickerShowOn.Both</codeEntityReference> if you want the calendar to appear when the text field receives focus or the button
		is clicked. To set icon use the <codeEntityReference autoUpgrade="true">M:Mvc.UI.jQuery.DatePickerBuilder.ButtonImagePath(System.String)</codeEntityReference> method. To apppear the button
		as only image use the <codeEntityReference autoUpgrade="true">M:Mvc.UI.jQuery.DatePickerBuilder.ButtonImageOnly(System.Boolean)</codeEntityReference> method.
		<para>The following shows the code how to setup a custom button:</para>
    	<code lang="C#">
    	<![CDATA[
            <% 
  				Html.jQuery().DatePicker()
                    .Name("releaseDate")
                    .ShowOn(DatePickerShowOn.Button)
                    .ButtonImagePath(Url.Content("~/Content/images/calendar.gif"))
                    .ButtonImageOnly(true)
                    .Render(); 
            %>
    	]]>
		</code>    		
		</content>
    </section>
    <section address="Animation">
    	<title>Animation</title>
    	<content>
    	To configure the animation use the <codeEntityReference autoUpgrade="true">M:Mvc.UI.jQuery.DatePickerBuilder.Animation(System.String,Mvc.UI.jQuery.AnimationDuration)</codeEntityReference> method.
    	The valid animation names are <codeInline>Blind</codeInline>, <codeInline>Clip</codeInline>, <codeInline>Drop</codeInline>,
    	<codeInline>Explode</codeInline>, <codeInline>Fold</codeInline>, <codeInline>Puff</codeInline>, <codeInline>Slide</codeInline>,
    	and <codeInline>Scale</codeInline>. You can set the animation duration to <codeEntityReference autoUpgrade="true">T:Mvc.UI.jQuery.AnimationDuration</codeEntityReference>
    	or any positive integer valaue.
		<para>The following shows the code how to setup animation:</para>
    	<code lang="C#">
    	<![CDATA[
            <% 
  				Html.jQuery().DatePicker()
                    .Name("releaseDate")
                    .Animation("fold", AnimationDuration.Slow)
                    .Render(); 
            %>
    	]]>
		</code>    		
		</content>
    </section>    
    <section address="Localization">
    	<title>Localization</title>
    	<content>
    	To show the localized version of the calendar use the <codeEntityReference autoUpgrade="true">M:Mvc.UI.jQuery.DatePickerBuilder.Localized(System.Boolean)</codeEntityReference> method.
    	The calendar will be shown as per the culture settings of current thread.  Using this methods ensures the month name, days names, date format will be 
    	automatically set, but the other settings like <codeEntityReference autoUpgrade="true">M:Mvc.UI.jQuery.DatePickerBuilder.CloseButtonText(System.String)</codeEntityReference>, 
    	<codeEntityReference autoUpgrade="true">M:Mvc.UI.jQuery.DatePickerBuilder.CurrentButtonText(System.String)</codeEntityReference>, <codeEntityReference autoUpgrade="true">M:Mvc.UI.jQuery.DatePickerBuilder.PreviousText(System.String)</codeEntityReference> and
    	<codeEntityReference autoUpgrade="true">M:Mvc.UI.jQuery.DatePickerBuilder.NextText(System.String)</codeEntityReference> needs to be called explicitly.
		<para>The following shows the code how to setup the localization, assuming that local culture is set in <codeInline>web.config</codeInline>:</para>
		<code lang="Xml" title="web.config">
    	<![CDATA[
    	<globalization requestEncoding="utf-8" responseEncoding="utf-8" culture="bg-BG" uiCulture="bg-BG"/>
    	]]>
    	</code>		
    	<code lang="C#" title="View">
    	<![CDATA[
            <% 
  				Html.jQuery().DatePicker()
                    .Name("releaseDate")
                    .Localized(true)
                    .CloseButtonText("затвори")
                    .CurrentButtonText("днес")
                    .PreviousText("&#x3c;назад")
                    .NextText("напред&#x3e;")
                    .Render(); 
            %>
    	]]>
		</code>    		
		</content>
    </section>
    <section address="OtherVisualSettings">
    	<title>Other Visual Settings</title>
    	<content>    
    		<list class="bullet">
    			<listItem>
    				Use the <codeEntityReference autoUpgrade="true">M:Mvc.UI.jQuery.DatePickerBuilder.MonthSteps(System.Int32)</codeEntityReference> method to skip
    				the number of month when previous/next link is clicked.
    			</listItem>
    			<listItem>
    				Use the <codeEntityReference autoUpgrade="true">M:Mvc.UI.jQuery.DatePickerBuilder.NumberOfMonthsToShow(System.Int32)</codeEntityReference> method to show
    				the number months when calendar is shown.
				</listItem>
    			<listItem>
    				Use the <codeEntityReference autoUpgrade="true">M:Mvc.UI.jQuery.DatePickerBuilder.ShowOtherMonths(System.Boolean)</codeEntityReference> method to show
    				the other months dates (unselectable) of the calendar.
    			</listItem>    			
    			<listItem>
    				Use the <codeEntityReference autoUpgrade="true">M:Mvc.UI.jQuery.DatePickerBuilder.ShowButtonPanel(System.Boolean)</codeEntityReference> method to show
    				an additional panel in the bottom of popup calendar.
    			</listItem>
    			<listItem>
    				Use the <codeEntityReference autoUpgrade="true">M:Mvc.UI.jQuery.DatePickerBuilder.GoToCurrent(System.Boolean)</codeEntityReference> method if you want to move to
    				current date instead of today.
				</listItem>		
    		</list>
		</content>
    </section>    	
    <relatedTopics>
    	<link xlink:href="0e611471-2c62-4f18-a5a6-508fdd93f801"/>
      	<link xlink:href="8f4a4331-5bf2-467f-ae04-f5901cecf880"/>
      	<link xlink:href="55313146-9B84-40d3-9282-048BB569BE17"/>
      	<link xlink:href="80c59d42-014f-4dac-8234-3e5e980ba15d"/>
      	<link xlink:href="4BC1FD9D-A3B6-4c2f-B7D0-901A7881726C"/>
      	<link xlink:href="1BCB7F42-8D1A-4415-AE7E-599E009D3B82"/>
    </relatedTopics>    
  </developerWalkthroughDocument>
</topic>