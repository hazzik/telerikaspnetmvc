<?xml version="1.0" encoding="utf-8"?>
<topic id="9369fafd-5582-4d07-9ba7-ff91795940dc" revisionNumber="1">
 <developerWalkthroughDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
     <para>
      		This topic shows how to configure animation effects for Telerik TabStrip for ASP.NET MVC in an <token>Mvc</token>
      		application.
      		<autoOutline lead="none" />
      </para>
    <prerequisites>
    	<content>
    		The required resources are outlined <link xlink:href="45f9dbed-12d3-483e-a244-8dfc5f7c3ba8">here</link>.
    	</content>
   	</prerequisites>
    
    <section address="Effects">
      <title>TabStrip's effects</title>
      <content>
      	<para>
      		Telerik TabStrip for ASP.NET MVC has the ability to animate the content added with <codeEntityReference>P:Telerik.Web.Mvc.UI.NavigationItem`1.Content</codeEntityReference> method
      		or <codeEntityReference autoUpgrade="true">M:Telerik.Web.Mvc.UI.TabStripItemBuilder.LoadContentFrom(System.String)</codeEntityReference> method.
      		Here is how to define simple animation effects in the tabstrip:
      	</para>
        <list class="bullet">
			<listItem>
				The <codeEntityReference autoUpgrade="true">M:Telerik.Web.Mvc.UI.TabStripBuilder.Effects(System.Action{Telerik.Web.Mvc.UI.EffectFactory})</codeEntityReference> method
				is used to control the available animation effects. The action builds the animation effects.
			</listItem>
			<listItem>
				The <codeEntityReference autoUpgrade="true">M:Telerik.Web.Mvc.UI.EffectFactory.Toggle</codeEntityReference> effect 
				show and hide the <codeEntityReference autoUpgrade="true">T:Telerik.Web.Mvc.UI.TabStripItem</codeEntityReference>s' content without animation.
			</listItem>
			<listItem>
				The <codeEntityReference autoUpgrade="true">M:Telerik.Web.Mvc.UI.EffectFactory.Slide</codeEntityReference> effect animate
			    is not supported by the panelbar. Use <codeEntityReference autoUpgrade="true">M:Telerik.Web.Mvc.UI.EffectFactory.Expand</codeEntityReference> method instead.
			</listItem>
			<listItem>
				The <codeEntityReference autoUpgrade="true">M:Telerik.Web.Mvc.UI.EffectFactory.Expand</codeEntityReference> method
				animates the height property of the <codeEntityReference autoUpgrade="true">T:Telerik.Web.Mvc.UI.TabStripItem</codeEntityReference>s' content.
				<para>
					Height animation has two overloads:
				</para>
				<list class="ordered">
					<listItem>
						The <codeEntityReference autoUpgrade="true">M:Telerik.Web.Mvc.UI.EffectFactory.Expand</codeEntityReference> method creates
				  		new <codeEntityReference autoUpgrade="true">T:Telerik.Web.Mvc.UI.PropertyAnimation</codeEntityReference>
				  		object of <codeInline>PropertyAnimationType.Height</codeInline> type. The default values for the open and close duration
				  		is <codeInline>DurationAnimation.Fast</codeInline>.
					</listItem>
					<listItem>
						The <codeEntityReference autoUpgrade="true">M:Telerik.Web.Mvc.UI.EffectFactory.Expand(System.Action{Telerik.Web.Mvc.UI.AnimationBuilder})</codeEntityReference>
						method gives you ability to set animation using <codeEntityReference autoUpgrade="true">T:Telerik.Web.Mvc.UI.AnimationBuilder</codeEntityReference>. This builder
						allows you to set open/close duration. Here is a code snippet showing how you can use it in your project:
						<code language="C#" title="View">
							<![CDATA[
								<% 	
									Html.Telerik().TabStrip()
										.Name("TabStrip")
										.Effects(fx =>
										{
							                fx
							                    .Height(
							                        properties =>
							                            .OpenDuration(AnimationDuration.Normal)
							                            .OpenDuration(AnimationDuration.Normal));
							
										})
							            .Items(items =>
					                    {
					                        items.Add().Text("Item 1")
					                             .Content(()=>
					                             {%>
					                             	<p>Content</p>
					                             <%});
					                        items.Add().Text("Item 2");
					                    })
							            .Render(); 
						        %>
							]]>
						</code>
					</listItem>
				</list>
			</listItem>
			<listItem>
				The <codeEntityReference autoUpgrade="true">M:Telerik.Web.Mvc.UI.EffectFactory.Opacity</codeEntityReference> effect 
				turns on the fade-in/fade-out transition of <codeEntityReference autoUpgrade="true">T:Telerik.Web.Mvc.UI.TabStripItem</codeEntityReference>s' content.
				<para>
					Opacity animation has two overloads:
				</para>
				<list class="ordered">
					<listItem>
						The <codeEntityReference autoUpgrade="true">M:Telerik.Web.Mvc.UI.EffectFactory.Opacity</codeEntityReference> method creates
				  		new <codeEntityReference autoUpgrade="true">T:Telerik.Web.Mvc.UI.PropertyAnimation</codeEntityReference>
				  		object of <codeInline>PropertyAnimationType.Opacity</codeInline> type. The default values for the open and close duration
				  		is <codeInline>DurationAnimation.Fast</codeInline>.
				  	</listItem>
				  	<listItem>				  		
				  		<codeEntityReference autoUpgrade="true">M:Telerik.Web.Mvc.UI.EffectFactory.Opacity(System.Action{Telerik.Web.Mvc.UI.AnimationBuilder})</codeEntityReference> method
					  	creates new <codeEntityReference autoUpgrade="true">T:Telerik.Web.Mvc.UI.PropertyAnimation</codeEntityReference> and and runs the code defined with <codeInline>Action&lt;AnimationBuilder&gt;</codeInline> parameter.
					  	PropertyAnimation object gives ability to set animation using <codeEntityReference autoUpgrade="true">T:Telerik.Web.Mvc.UI.AnimationBuilder</codeEntityReference>. This builder
						allows you to set open/close duration. Here is a code snippet showing how you can use it in your project:
						<code language="C#" title="View">
							<![CDATA[
								<% 	
									Html.Telerik().TabStrip()
										.Name("TabStrip")
										.Effects(fx =>
										{
							                fx
							                    .Opacity(
							                        properties =>
							                            .OpenDuration(AnimationDuration.Normal)
							                            .OpenDuration(AnimationDuration.Normal));
							
										})
							            .Items(items =>
					                    {
					                        items.Add().Text("Item 1")
					                             .Content(()=>
					                             {%>
					                             	<p>Content</p>
					                             <%});
					                        items.Add().Text("Item 2");
					                    })
							            .Render(); 
						        %>
							]]>
						</code>
				  	</listItem>
				</list>
			</listItem>
        </list>
      </content>
    </section>
    <relatedTopics>
      <link xlink:href="09e4fd74-7a57-4102-af7e-a23447005198">Introduction</link>
      <link xlink:href="398ef44f-f997-4979-a5dd-0f80af3130b8">TabStrip Binding</link>
      <link xlink:href="9a43e448-7ac6-4c7f-b0ce-9a022a38d69e">Client API</link>
      <link xlink:href="91daaeb2-3298-4e4d-9b3b-bff34add4676">Defining item content</link>
      <link xlink:href="b95455d3-88e1-4b2a-bacb-0a4445066959">Server API</link>
    </relatedTopics>
  </developerWalkthroughDocument>
</topic>