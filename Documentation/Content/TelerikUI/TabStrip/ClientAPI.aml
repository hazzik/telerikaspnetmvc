<?xml version="1.0" encoding="utf-8"?>
<topic id="9a43e448-7ac6-4c7f-b0ce-9a022a38d69e" revisionNumber="1">
 <developerWalkthroughDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
     <introduction>
      <para>
      	<autoOutline lead="none" />
      </para>
    </introduction>
    <prerequisites>
    	<content>
    		You should add JavaScript files and other resources to your <token>Mvc</token> project. 
    		The required actions are outlined <link xlink:href="45f9dbed-12d3-483e-a244-8dfc5f7c3ba8">here</link>.
    	</content>
   	</prerequisites>
   	<section address="GetClientObjectOfTabStrip">
   		<title>How to get the tabstrip client object?</title>
   		<content>
   			<para>
   				Here is a code snippet showing how to retrieve the client object of the tabstrip.
   			</para>
   			
			<code language="C#" title="View">
			<![CDATA[
				<% 
				    Html.Telerik().TabStrip()
		                .Name("TabStrip")
		                .Items(items =>{/*items definition */})
		                ...
		                .Render(); 
				%>
		    ]]>
			</code>
			
			<code language="JavaScript">
			<![CDATA[
			   <script type="text/javascript">
			   		function getTabStrip(){
			   		
			   			var tabStrip = $("#TabStrip").data("tTabStrip");
			   			
			   			return tabStrip;
			   			
			   		}
			   </script>
			]]>
			</code>

   		</content>
   	</section>
    <section address="ClientEvents">
      <title>Client events</title>
      <content>
      	<para>
      		Telerik TabStrip for ASP.NET MVC provides client-side event handling. 
      		Here is a code snippet showing how to subscribe the client events:
      	</para>
      	
		<code language="C#" title="View">
		<![CDATA[
			<% 
			    Html.Telerik().TabStrip()
		            .Name("TabStrip")
		            .Items(items =>{/*items definition */})
					.ClientEvents(events =>
					{
		                events.OnSelect("Select");
						events.OnLoad(() =>
						{%>
							function(e) {
								/*TODO: actions when the control is loaded.*/
								// "this" is the sender. In this event handler will be the tabstrip.
							}
						<%});
					})
		            .Render(); %>
		]]>
		</code>
		
		<code language="JavaScript">
			<![CDATA[
			<script type="text/javascript">		
			    function Select(e) {
			        // "this" in this event handler will be the link element.
			        // the "e" is an object passed by the jQuery event trigger. 
			    }
			</script>
			]]>
		</code>

		<para>
			Explanation of code snippet:
		</para>
		<list class="bullet">
			<listItem>
				The OnLoad event is raised when the component is loaded on the client. To handle OnLoad event use the overload of the 
				<codeEntityReference autoUpgrade="true">M:Telerik.Web.Mvc.UI.TabStripClientEventsBuilder.OnLoad(System.String)</codeEntityReference> method, which can accept name of the JavaScript function as a string parameter or <codeInline>Action</codeInline>.
				The <codeInline>Action</codeInline> parameter will be directly rendered on the client without any modification.
			</listItem>
			<listItem>
				The OnSelect event is raised when one of the component's items is selected. To handle OnSelect event you can use the overload of the 
				<codeEntityReference autoUpgrade="true">M:Telerik.Web.Mvc.UI.TabStripClientEventsBuilder.OnSelect(System.String)</codeEntityReference> method, which can accept name of the JavaScript function as a string param or <codeInline>Action</codeInline>.
				The <codeInline>Action</codeInline> parameter will be directly rendered on the client without any modification.
			</listItem>
		</list>
	  </content>
    </section>
    <section address="ClientAPI">
      <title>Client API</title>
            <content>
      	<para>
      		 Telerik TabStrip for ASP.NET MVC provides client-side API to handle its items. 
      		Below is a code exceprts which describes how to subscribe and use the client API:
      	</para>
      	
		<code language="C#" title="View">
		<![CDATA[
		<% 
		    Html.Telerik().TabStrip()
	            .Name("TabStrip")
	            .Items(items =>
	            {
	                items.Add().Text("Item 1")
	                items.Add().Text("Item 2");
	            })
	            .Render(); %>
			]]>
		</code>
		
<code language="javascript">
<![CDATA[
	<script type="text/javascript">
	
		function SelectItem() {
            var tabStrip = $("#TabStrip").data("tTabStrip");

            tabStrip.select($(".t-item", tabStrip.element)[0]);
        }

	    function EnableItem(e) {
	        
	        var tabStrip = $("#TabStrip").data("tTabStrip");

	        tabStrip.enable($(".t-item", tabStrip.element)[0]);
	    }

	    function DisableItem(e) {
	        
	        var tabStrip = $("#TabStrip").data("tTabStrip");

	        tabStrip.disable($(".t-item", tabStrip.element)[0]);
	    }
	</script>
]]>
</code>
		<para>
			Explanation of code snippet:
		</para>
		<para>
		The select, enable, disable methods internally convert passed parameter
		to jQuery object. They can accept three types of arguments:
		<list class="bullet">
			<listItem>
				DOM element (with some code showing how to get a dom element)
			</listItem>
			<listItem>
				jQuery object (again with a sample)
			</listItem>
			<listItem>
				String selector (again with a sample)
			</listItem>
		</list>
		</para>
		<list class="bullet">
			<listItem>
				The <codeInline>select</codeInline> method can be used through "tTabStrip" object.
				Here is an example which shows how to select &lt;li&gt; element with all described possibilities:
				<list class="bullet">
					<listItem>
						<para>
							Passing DOM element as a parameter:
						</para>						
						<code language="JavaScript">
						<![CDATA[
							function SelectItem() {
								
						        var tabStrip = $("#TabStrip").data("tTabStrip");
					
								var domElement = $("li:first", tabStrip.element).element; //first <li> element you can use $(".t-item:first", tabStrip.element)
					
						        tabStrip.select(domElement);
		                    }
						]]>
						</code>
						<para>
							As you noticed, only passed DOM element which is &lt;li&gt; will be selected.
						</para>
					</listItem>
					<listItem>
						<para>
							Passing jQuery collection of &lt;li&gt; elements:
						</para>						
						<code language="JavaScript">
						<![CDATA[
		                    function SelectItem() {
								
						        var tabStrip = $("#TabStrip").data("tTabStrip");
					
								var items = $("li", tabStrip.element); //jQuery collection of <li> elements
					
						        tabStrip.select(items);
		                    }
						]]>
						</code>
						<para>
							All items in the jQuery collection will be selected. This method will close all 
							&lt;li&gt; elements in the tabstrip.
						</para>
					</listItem>
					<listItem>
						<para>
							Passing jQuery selector as parameter of the method:
						</para>						
						<code language="JavaScript">
						<![CDATA[
		                    function SelectItem() {
								
						        var tabStrip = $("#TabStrip").data("tTabStrip");
						        
						        tabStrip.select("li:first");
		                    }
						]]>
						</code>
						<para>
							jQuery get the passed selector and depending on the result the corresponding items 
							are selected. In this example first item will be selected.
						</para>
					</listItem>
				</list>
			</listItem>
			<listItem>
				The <codeInline>enable</codeInline> method can be used trough "tTabStrip" object.
				Here is an example which shows how to enable &lt;li&gt; element with all described possibilities:
				<list class="bullet">
					<listItem>
						<para>
							Passing DOM element as a parameter:
						</para>						
						<code language="JavaScript">
						<![CDATA[
							function EnableItem() {
			                   var tabStrip = $("#TabStrip").data("tTabStrip");
                               var domElement = $("li:first", tabStrip.element)[0]; //first <li> element
			                   tabStrip.enable(domElement);
		                    }
						]]>
						</code>
						<para>
							As you noticed, only passed DOM element which is &lt;li&gt; will be enabled.
						</para>
					</listItem>
					<listItem>
						<para>
							Passing jQuery collection of &lt;li&gt; elements:
						</para>						
						<code language="JavaScript">
						<![CDATA[
							function EnableItem() {
			                  var tabStrip = $("#TabStrip").data("tTabStrip");
		                      var items = $("li", tabStrip.element); //jQuery collection of <li> elements
		                      tabStrip.enable(items);
		                    }
						]]>
						</code>
						<para>
							All items in the jQuery collection will be enabled. This method will enable all 
							&lt;li&gt; elements in the tabstrip.
						</para>
					</listItem>
					<listItem>
						<para>
							Passing jQuery selector as parameter of the method:
						</para>						
						<code language="JavaScript">
						<![CDATA[
							function EnableItem() {
			                   var tabStrip = $("#TabStrip").data("tTabStrip");
			                   tabStrip.enable("li:first");
		                    }
						]]>
						</code>
						<para>
							jQuery get the passed selector and depending on the result the corresponding items 
							are enabled. In this example first item will enable.
						</para>
					</listItem>
				</list>
			</listItem>
			<listItem>
				The <codeInline>disable</codeInline> method can be used trough "tTabStrip" object.
				Here is an example which shows how to disable &lt;li&gt; element with all described possibilities:
				<list class="bullet">
					<listItem>
						<para>
							Passing DOM element as a parameter:
						</para>						
						<code language="JavaScript">
						<![CDATA[
							function DisableItem() {
			                   var tabStrip = $("#TabStrip").data("tTabStrip");
                               var domElement = $("li:first", tabStrip.element)[0]; //first <li> element
			                   tabStrip.disable(domElement);
		                    }
						]]>
						</code>
						<para>
							As you noticed, only passed DOM element which is &lt;li&gt; will be disabled.
						</para>
					</listItem>
					<listItem>
						<para>
							Passing jQuery collection of &lt;li&gt; elements:
						</para>						
						<code language="JavaScript">
						<![CDATA[
							function DisableItem() {
			                  var tabStrip = $("#TabStrip").data("tTabStrip");
		                      var items = $("li", tabStrip.element); //jQuery collection of <li> elements
		                      tabStrip.disable(items);
		                    }
						]]>
						</code>
						<para>
							All items in the jQuery collection will be disabled. This method will disable all 
							&lt;li&gt; elements in the tabstrip.
						</para>
					</listItem>
					<listItem>
						<para>
							Passing jQuery selector as parameter of the method:
						</para>						
						<code language="JavaScript">
						<![CDATA[
							function DisableItem() {
			                   var tabStrip = $("#TabStrip").data("tTabStrip");
			                   tabStrip.disable("li:first");
		                    }
						]]>
						</code>
						<para>
							jQuery get the passed selector and depending on the result the corresponding items 
							are disabled. In this example first item will disable.
						</para>
					</listItem>
				</list>
			</listItem>
		</list>
	  </content>
    </section>

    <relatedTopics>
      <link xlink:href="09e4fd74-7a57-4102-af7e-a23447005198">Introduction</link>
      <link xlink:href="9369fafd-5582-4d07-9ba7-ff91795940dc">Effects in TabStrip</link>
      <link xlink:href="398ef44f-f997-4979-a5dd-0f80af3130b8">TabStrip Binding</link>
      <link xlink:href="91daaeb2-3298-4e4d-9b3b-bff34add4676">Defining item content</link>
      <link xlink:href="b95455d3-88e1-4b2a-bacb-0a4445066959">Server API</link>
    </relatedTopics>
  </developerWalkthroughDocument>
</topic>