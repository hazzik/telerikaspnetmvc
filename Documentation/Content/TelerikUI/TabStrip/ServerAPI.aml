<?xml version="1.0" encoding="utf-8"?>
<topic id="b95455d3-88e1-4b2a-bacb-0a4445066959" revisionNumber="1">
  <developerWalkthroughDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
    <introduction>
      <para>This topic is focused on the Server API</para>
    </introduction>
 	<para>
 		Here is a list of the <codeEntityReference autoUpgrade="true">T:Telerik.Web.Mvc.UI.TabStripBuilder</codeEntityReference>'s methods
 		accompanied with a short description:
 	</para>
    <list class="bullet">
    	<listItem>
    		<para>
    			<codeEntityReference autoUpgrade="true">M:Telerik.Web.Mvc.UI.TabStripBuilder.Items(System.Action{Telerik.Web.Mvc.UI.TabStripItemFactory})</codeEntityReference>
    			method:
    		</para>
    		<para>
    			You can use this method to declaratively add items to the <codeEntityReference autoUpgrade="true">T:Telerik.Web.Mvc.UI.TabStrip</codeEntityReference> component.
    		</para>
    		<alert class="important">
    			<para>
    				Even that every <codeInline>TabStripItem</codeInline> has an <codeInline>Items</codeInline> collection, only root items of the component will be rendered.
    			</para>
    		</alert>
    		
			<code language="C#" title="View">
			<![CDATA[
			...
				Html.Telerik().TabStrip()
					.Name("TabStrip1")
					.Items(items => 
					{
						items.Add().Text("Item 1");
						items.Add().Text("Item 2");
						items.Add().Text("Item 3");
						items.Add().Text("Item 4");
		            })
            ...
			]]>
			</code>
    	</listItem>
    	<listItem>
    		<para>
    			<codeEntityReference autoUpgrade="true">M:Telerik.Web.Mvc.UI.TabStripBuilder.Theme(System.String)</codeEntityReference>
    			method:
    		</para>
    		<para>
    			With this method you can set the theme for the component.
    		</para>
    		<code language="C#" title="View">
    			<![CDATA[
    			   <%
    			     Html.Telerik().TabStrip()
    			                   .Name("TabStrip1")
    			                   .Items(items => { //add items })
    			                   .Theme("Theme name")
    			                   .Render();
    			   %>
    			]]>
    		</code>
    	</listItem>
    	<listItem>
    		<para>
    			<codeEntityReference autoUpgrade="true">M:Telerik.Web.Mvc.UI.TabStripBuilder.ItemAction(System.Action{Telerik.Web.Mvc.UI.TabStripItem})</codeEntityReference>
    			method:
    		</para>
    		<code language="C#" title="View">
    			<![CDATA[
    			   <%
    			     Html.Telerik().TabStrip()
    			                   .Name("TabStrip1")
    			                   .BindTo("siteMap") 
    			                   .ItemAction((item)=>
    			                   {
    			                   		if (item.Parent == null)
										{
											item.SpriteCssClasses = "t" + item.Text;
										}
    			                   })
    			                   .Render();
    			   %>
    			]]>
    		</code>
    		<para>
    			This method allows you to pass an <codeInline>Action</codeInline> method with parameter <codeInline>TabStripItem</codeInline>, which will be executed before rendering of the item.
    			You can use it as a callback for each item. In other words it allows you to set properties of the item before rendering it.
    		</para>    		
			<alert class="note">
			  <para>
			  	This Action&lt;TabStripItem&gt; has the same abilities as the Action passed as a second parameter into the <codeEntityReference qualifyHint="false" autoUpgrade="true">M:Telerik.Web.Mvc.UI.TabStripBuilder.BindTo(System.String)</codeEntityReference> method.
			  	The difference here is that this action will be executed even if the items are declaratively added to TabStrip. Hence this method
			  	is not bound by the way how the items are added to TabStrip component.
			  </para>
			</alert>
    	</listItem>
    	<listItem>
    		<para>
    			<codeEntityReference autoUpgrade="true">M:Telerik.Web.Mvc.UI.TabStripBuilder.SelectedIndex(System.Int32)</codeEntityReference>
    			method:
    		</para>
    		<code language="C#" title="View">
    			<![CDATA[
    			   <%
    			     Html.Telerik().TabStrip()
    			                   .Name("TabStrip1")
    			                   .BindTo("siteMap")
    			                   .SelectedIndex(1)
    			                   .Render();
    			   %>
    			]]>
    		</code>
    		<para>
    			With this method you can determine which root item to be selected on initial rendering.
    		</para>    		
			<alert class="important">
			  <para>
				The method does not allow to enter index bigger than the count of the Items collection or negative integer. If you pass incorrect value 
				the UI component will throw an exception.
			  </para>
			</alert>
    	</listItem>
    </list>
    <relatedTopics>
      <link xlink:href="09e4fd74-7a57-4102-af7e-a23447005198">Introduction</link>
      <link xlink:href="9369fafd-5582-4d07-9ba7-ff91795940dc">Effects in TabStrip</link>
      <link xlink:href="398ef44f-f997-4979-a5dd-0f80af3130b8">TabStrip Binding</link>
      <link xlink:href="9a43e448-7ac6-4c7f-b0ce-9a022a38d69e">Client API</link>
      <link xlink:href="91daaeb2-3298-4e4d-9b3b-bff34add4676">Defining item content</link>
    </relatedTopics>
  </developerWalkthroughDocument>
</topic>