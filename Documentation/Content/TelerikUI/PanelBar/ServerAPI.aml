<?xml version="1.0" encoding="utf-8"?>
<topic id="8e72f629-4cef-4406-acbd-e824586e2bae" revisionNumber="1">
  <developerWalkthroughDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
    <introduction>
      <para>This topic is focused on the Server API</para>
    </introduction>
 	<para>
 		Here is a list of the <codeEntityReference autoUpgrade="true">T:Telerik.Web.Mvc.UI.PanelBarBuilder</codeEntityReference>'s methods
 		accompanied with a short description:
 	</para>
    <list class="bullet">
    	<listItem>
    		<para>
    			<codeEntityReference autoUpgrade="true">M:Telerik.Web.Mvc.UI.PanelBarBuilder.Items(System.Action{Telerik.Web.Mvc.UI.PanelBarItemFactory})</codeEntityReference>
    			method:
    		</para>
    		<para>
    			You can use this method to declaratively add items to the panelbar.
    			Every <codeInline>PanelBarItem</codeInline> has an Items collection, which allows you to add child items. Note that this method will add the items to the Items collection 
    			of the corresponding <codeInline>PanelBarItem</codeInline> object, not to the panelbar.
    		</para>
    		
			<code language="C#" title="View">
			<![CDATA[
			...
				Html.Telerik().PanelBar()
					.Name("PanelBar")
					.Items(items => 
					{
						items.Add()
						     .Text("Item 1")
							 .Items(items =>
				             {
				                items.Add()
				                     .Text("Item 1.1")
				                     .Items(item =>
				                     {
				                         item.Add().Text("Item 1.1.1");
				                         item.Add().Text("Item 1.1.2");
				                         item.Add().Text("Item 1.1.3");
				                         item.Add().Text("Item 1.1.4");
				                     });
				             }
		            })
            ...
			]]>
			</code>			
			<alert class="note">
			  <para>
			  	The child item ("Item 1.1") in the above example will be added to the Items collection of the item with title "Item 1".
			  	You can also obverse in the code snippet how second level of hierarchy can be defined.
			  </para>
			</alert>
    	</listItem>
    	<listItem>
    		<para>
    			<codeEntityReference autoUpgrade="true">M:Telerik.Web.Mvc.UI.PanelBarBuilder.Theme(System.String)</codeEntityReference>
    			method:
    		</para>
    		<para>
    			With this method you can set the theme for the component. <!-- list of Themes-->
    		</para>
    		<code language="C#" title="View">
    			<![CDATA[
    			   <%Html.Telerik().PanelBar()
    			                   .Name("PanelBar")
    			                   .Items(items => { //add items })
    			                   .Theme("Theme name")
    			                   .Render();
    			   %>
    			]]>
    		</code>
    	</listItem>
    	<listItem>
    		<para>
    			<codeEntityReference autoUpgrade="true">M:Telerik.Web.Mvc.UI.PanelBarBuilder.ItemAction(System.Action{Telerik.Web.Mvc.UI.PanelBarItem})</codeEntityReference>
    			method:
    		</para>
    		<code language="C#" title="View">
    			<![CDATA[
    			   <%Html.Telerik().PanelBar()
    			                   .Name("PanelBar")
    			                   .BindTo("siteMap") 
    			                   .ItemAction((item)=>
    			                   {
    			                   		if (item.Parent == null)
										{
											item.SpriteCssClasses = "t" + item.Text;
										}
    			                   })
    			                   .Render();
    			   %>
    			]]>
    		</code>
    		<para>
    			This method allows you to pass an <codeInline>Action</codeInline> method with parameter <codeInline>PanelBarItem</codeInline>, which will be executed before rendering of the item.
    			You can use it as a callback for each item. In other words it allows you to set properties of the item before rendering it.
    		</para>    		
			<alert class="note">
			  <para>
			  	This Action&lt;PanelBarItem&gt; has the same abilities as the Action passed as a second parameter into the BindTo method.
			  	The difference here is that this action will be executed even if the items are declaratively added to panelbar. Hence this method
			  	is not bound by the way how the items are added to panelbar.
			  </para>
			</alert>
    	</listItem>
    	<listItem>
    		<para>
    			<codeEntityReference autoUpgrade="true">M:Telerik.Web.Mvc.UI.PanelBarBuilder.HighlightPath(System.Boolean)</codeEntityReference>
    			method:
    		</para>
    		<code language="C#" title="View">
    			<![CDATA[
    			   <%Html.Telerik().PanelBar()
    			                   .Name("PanelBar")
    			                   .BindTo("siteMap") 
    			                   .HighlightPath(true)
    			                   .Render();
    			   %>
    			]]>
    		</code>
    		<para>
    			Turns on/off the ability of the panelbar to highlight the currently selected item. It checks if the controller name and action name of the item
    			are the same as the one in the ViewContext. If they are the same the item is selected and all parents are expanded.
    		</para>    		
			<alert class="note">
			  <para>
				This feature is turned on by default. If you need to stop it use this code snippet:	<codeInline>.HighlightPath(false)</codeInline>
			  </para>
			</alert>
    	</listItem>
    	<listItem>
    		<para>
    			<codeEntityReference autoUpgrade="true">M:Telerik.Web.Mvc.UI.PanelBarBuilder.ExpandAll(System.Boolean)</codeEntityReference>
    			method:
    		</para>
    		<code language="C#" title="View">
    			<![CDATA[
    			   <%Html.Telerik().PanelBar()
    			                   .Name("PanelBar")
    			                   .BindTo("siteMap")
    			                   .ExpandAll(true)
    			                   .Render();
    			   %>
    			]]>
    		</code>
    		<para>
    			This method will expand all items if the expand mode is <codeInline>PanelBarExpandMode.Multi</codeInline>.
    		</para>    		
			<alert class="note">
			  <para>
				By default the expand mode of the panelbar is <codeInline>PanelBarExpandMode.Multi</codeInline>.
			  </para>
			</alert>
    	</listItem>
    	<listItem>
    		<para>
    			<codeEntityReference autoUpgrade="true">M:Telerik.Web.Mvc.UI.PanelBarBuilder.SelectedIndex(System.Int32)</codeEntityReference>
    			method:
    		</para>
    		<code language="C#" title="View">
    			<![CDATA[
    			   <%Html.Telerik().PanelBar()
    			                   .Name("PanelBar")
    			                   .BindTo("siteMap")
    			                   .SelectedIndex(1)
    			                   .Render();
    			   %>
    			]]>
    		</code>
    		<para>
    			With this method you can determine which root item to be selected on initial rendering. If the item has childrens, the it will be
    			expanded. 
    		</para>    		
			<alert class="important">
			  <para>
				The method does not allow to enter index bigger than the count of the Items collection or negative integer. If you pass incorrect value 
				the UI component will throw an exception.
			  </para>
			</alert>
    	</listItem>
    </list>
    <relatedTopics>
      <link xlink:href="f7761b49-ae82-4570-8266-fba7f4591210">First look</link>
      <link xlink:href="04ab6aeb-dd51-43f7-abdd-f468d1efc994">PanelBar binding</link>
      <link xlink:href="09537707-dd41-4ca7-9d43-52d95abc664d">Expand/Collapse feature</link>
      <link xlink:href="54157497-10eb-4be8-a87c-e0482c082d14">Effects in PanelBar</link>
      <link xlink:href="a1ec354a-a556-4577-ad93-4fd7cd0525fd">Client API</link>
      <link xlink:href="cfb2af47-921f-42c9-936b-bc01dc602704">Templates</link>
    </relatedTopics>
  </developerWalkthroughDocument>
</topic>