<?xml version="1.0" encoding="utf-8"?>
<topic id="9cc3719b-22e5-41d8-9dad-22fc203c0b58" revisionNumber="1">
  <developerConceptualDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
    <introduction>
      <para>This help topic discusses how to implement custom binding with 
      	Telerik Grid for ASP.NET MVC
      </para>
    </introduction>
    <section address="CustomBinding">
      <content>
        <para>
        	Telerik Grid for ASP.NET MVC is using its built-in Linq-based expression engine
        	to perform the grid operations - paging, sorting and filtering. However
        	in some cases the developer may want to bypass the expression engine and page, sort
        	or filter the grid data by himself. This is called "Custom binding".
        </para>
      </content>
      <sections>
      	<section>
      		<title>Custom Server Binding</title>
      		<content>
      			You can implement both server and ajax custom binding. Now we will cover the
      			custom server binding scenario.
      			<list class="bullet">
      				<listItem>
      					The action method needs to be decorated with the <codeEntityReference autoUpgrade="true">T:Telerik.Web.Mvc.GridActionAttribute</codeEntityReference>
      				</listItem>
      				<listItem>
      					The action method should have a parameter of type <codeEntityReference autoUpgrade="true">T:Telerik.Web.Mvc.GridCommand</codeEntityReference>
      					which will contain info about the grid data operations - current page, sorted columns, filters etc. You can use
      					that object to perform paging, sorting and filtering.
      				</listItem>
      				<listItem>
      					If you need paging you need to set the total number of records so the pager is properly configured. This is done via the
      					<codeEntityReference autoUpgrade="true">M:Telerik.Web.Mvc.UI.GridPagerSettingsBuilder.Total(System.Int32)</codeEntityReference>
      					method.
      				</listItem>
      				<listItem>
      					The <codeEntityReference autoUpgrade="true">M:Telerik.Web.Mvc.UI.GridBuilder`1.EnableCustomBinding(System.Boolean)</codeEntityReference>
      					should be set to <codeInline>true</codeInline>.
      				</listItem>
      			</list>
      			Here is a sample code snippet:
      			<code lang="C#" title="Controller">
      				<![CDATA[
						[GridAction]
						public ActionResult Index(GridCommand command)
						{
							IEnumerable<Order> data = GetData(command);
							var dataContext = new NorthwindDataContext();

							//Required for pager configuration
							ViewData["total"] = dataContext.Orders.Count();

							return View(data);
						}
						
						//Utility method which does custom paging and sorting using Linq
						private static IEnumerable<Order> GetData(GridCommand command)
						{
						    var dataContext = new NorthwindDataContext();
						    IQueryable<Order> data = dataContext.Orders;
						
						    //Apply sorting
						    foreach (SortDescriptor sortDescriptor in command.SortDescriptors)
						    {
						        if (sortDescriptor.SortDirection == ListSortDirection.Ascending)
						        {
						            switch (sortDescriptor.Member)
						            {
						                case "OrderID":
						                    data = data.OrderBy(order => order.OrderID);
						                    break;
						                case "ShipAddress":
						                    data = data.OrderBy(order => order.ShipAddress);
						                    break;
						            }
						        }
						        else
						        {
						            switch (sortDescriptor.Member)
						            {
						                case "OrderID":
						                    data = data.OrderByDescending(order => order.OrderID);
						                    break;
						                case "ShipAddress":
						                    data = data.OrderByDescending(order => order.ShipAddress);
						                    break;
						            }
						        }
						    }
						
						    //Then paging
						    if (command.PageSize > 0)
						    {
						        data = data.Skip((command.Page - 1) * command.PageSize);
						    }
						
						    data = data.Take(pageSize);
						    return data;
						}
      				]]>
      			</code>
      			<code lang="C#" title="View">
      				<![CDATA[
					<%= Html.Telerik().Grid(Model)
					        .Name("Grid")
					        .Pageable(settings => settings.Total((int)ViewData["total"]))
					        .EnableCustomBinding(true)
					        .Sortable()
					%>]]>
      			</code>
      			The interesting part is the <codeInline>GetData</codeInline> method which does the 
      			custom paging and sorting. You can replace it with your implementation of choice.
      		</content>
      	</section>
      	<section>
      		<title>Custom Ajax Binding</title>
      		<content>
      			Using Ajax custom binding is pretty much the same. Again you need the <codeInline>GridActionAttribute</codeInline>,
      			a <codeInline>GridCommand</codeInline> parameter, a method to perform the actual custom binding. The only difference is
      			that you need to set the <codeInline>EnableCustomBinding</codeInline> property of the <codeInline>GridActionAttribute</codeInline>
      			to <codeInline>true</codeInline>:
      			<code lang="C#" title="Controller">
      			<![CDATA[
					[GridAction(EnableCustomBinding = true)]
					public ActionResult _CustomBinding(GridCommand command)
					{
						IEnumerable<Order> data = GetData(command);
						
						var dataContext = new NorthwindDataContext();
						return View(new GridModel 
			            { 
			                Data = data, 
			                Total = dataContext.Orders.Count() 
			            });
					}]]>
      			</code>
      			<code lang="C#" title="View">
      				<![CDATA[
					<%= Html.Telerik().Grid(Model)
					        .Name("Grid")
					        .Pageable(settings => settings.Total((int)ViewData["total"]))
					        .Ajax(ajax => ajax.Action("_CustomBinding", "Home"))
					        .EnableCustomBinding(true)
					        .Sortable()
					%>]]>
      			</code>
      		</content>
      	</section>
      </sections>
    </section>
    <relatedTopics>
    	<link xlink:href="34ac75d0-5ce3-4bab-ac2a-208c720b4c99" />
    	<link xlink:href="2512933f-ff08-42ea-ba84-e5d2c69cc7f2" />
    	<link xlink:href="f526622b-542e-4eb6-a831-c358a590c495" />
    	<link xlink:href="4609082c-4319-4274-ae29-d19412f4836f" />
    	<link xlink:href="7872ef72-956e-4cb3-8872-b068f7833def" />
    	<link xlink:href="42427fad-1e7b-4c05-afea-e088bbf54517" />
    	<link xlink:href="669182c9-f8cb-490d-8aed-b3c8c5edd312" />
	</relatedTopics>
  </developerConceptualDocument>
</topic>