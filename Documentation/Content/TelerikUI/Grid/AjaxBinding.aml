<?xml version="1.0" encoding="utf-8"?>
<topic id="f526622b-542e-4eb6-a831-c358a590c495" revisionNumber="1">
  <developerConceptualDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
    <introduction>
      <para>
      	This help topic explains how to configure Telerik Grid for ASP.NET MVC to use
      	Ajax when performing data operations - paging, sorting and filtering.
      </para>
    </introduction>
    <section address="Ajax Binding">
      <title>Ajax Binding</title>
      <content>
        <para>
        	By default Telerik Grid for ASP.NET MVC is configured to use <link xlink:href="2512933f-ff08-42ea-ba84-e5d2c69cc7f2" />.
        	While server binding has its merits (SEO for example) smoother user experience can be provided by using
        	Ajax requests when doing paging, sorting or filtering. This grid operation mode is called "Ajax binding".
        </para>
        <para>
        	To configure the grid to use Ajax binding you need to perform the following steps:
        	<list class="ordered">
        		<listItem>
        			Add a new action method which is decorated with the 
        			<codeEntityReference autoUpgrade="true">T:Telerik.Web.Mvc.GridActionAttribute</codeEntityReference>
        			and returns result of type <codeEntityReference autoUpgrade="true">T:Telerik.Web.Mvc.IGridModel</codeEntityReference>.
        			Both the attribute and the result type are mandatory. 
        			<code lang="C#" title="Controller">
        			<![CDATA[
        			public class HomeController : Controller
        			{
	        			//Used for the Ajax binding
	        			[GridAction]
						public ActionResult _AjaxBinding()
						{
							NorthwindDataContext northwind = new NorthwindDataContext();
							
							return View(new GridModel<Order>
							{
								Data = northwind.Orders;
							});
						}
						
						// Renders the view initially. The grid is bound server-side for the first request
						public ActionResult Index()
						{
							NorthwindDataContext northwind = new NorthwindDataContext();
							return View(northwind.Orders)
						}
					}
        			]]>
        			</code>
        			<alert class="important">
        				Behind the scenes the <codeInline>GridActionAttribute</codeInline>
        				uses the <codeInline>IGridModel</codeInline> and the Linq expression engine to apply paging, sorting and filtering.
        				Then the <codeInline>ViewResult</codeInline> is replaced with <codeInline>JsonResult</codeInline>. On the client-side
        				the grid is bound to the JSON returned by the action method.
        			</alert>
        		</listItem>
        		<listItem>
        			Configure the grid to use the action method created at the previous step. This is done using
        			the <codeEntityReference autoUpgrade="true">M:Telerik.Web.Mvc.UI.GridBuilder`1.Ajax(System.Action{Telerik.Web.Mvc.UI.GridAjaxSettingsBuilder})</codeEntityReference>
        			method:
        			<code lang="C#" title="View">
        			<![CDATA[
					<%= Html.Telerik().Grid(Model)
					        .Name("Orders")
        		            .Ajax(ajax => ajax.Action("_AjaxBinding", "Home"))
        		            .Pagealbe()
        		            .Sortable()
        		    %>
        			]]>
        			</code>
        			<alert class="note">
        			This example is using also Server binding to bind the grid initially. This is entirely optional.
        			If the grid is configured to use Ajax binding and is not inititially bound (using server binding) 
        			it will request the action method and databound itself as soon as the page is loaded.
        			</alert>
        		</listItem>
        	</list>
        </para>
        <section address="Configuration">
        	<title>Configuring the Ajax binding</title>
        	<content>
        		<para>
        		Sometimes the action method which provides the JSON for the grid may need
        		additional arguments. You can configure the Ajax binding using the 
				<codeEntityReference autoUpgrade="true">M:Telerik.Web.Mvc.UI.GridBuilder`1.Ajax(System.Action{Telerik.Web.Mvc.UI.GridAjaxSettingsBuilder})</codeEntityReference>
				method:
				<code lang="C#" title="Controller">
				<![CDATA[
        	     public class HomeController : Controller
        	     {
	        	     [GridAction]
	        	     public ActionResult _AjaxBinding(string id)
	                 {
	                    NorthwindDataContext northwind = new NorthwindDataContext();
	                    IQueryable<Order> orders = northwind.Orders;
	                    
	                    if (!string.IsNullOrEmpty(id))
	                    {
	                    	//Select the orders for the specified CustomerID
	                    	orders = from o in orders
	                    	         where o.CustomerID == id
	                    	         select o;
	                    }
	                    return View(new GridModel<Order>
        				{
            				Data = orders;
        				});
					}
                 }
        	    ]]>
        	    </code>
				<code lang="C#" title="View">
        		<![CDATA[
        		 <%= Html.Telerik().Grid(Model)
        		         .Name("Orders")
        		         .Ajax(ajax => ajax
        		         	.Action("_AjaxBinding", "Home", new {id = (string)ViewData["id"]})
        		         )
        		         .Pagealbe()
        		         .Sortable()
        		]]>
        		</code>
            	Here the method <codeEntityReference autoUpgrade="true">M:Telerik.Web.Mvc.UI.GridRequestSettingsBuilderBase`2.Action(System.String,System.String,System.Object)</codeEntityReference> is used to supply the additional <codeInline>id</codeInline> argument.
            	The grid will now pass the <codeInline>id</codeInline> parameter when doing paging, sorting and filtering.
            	</para>
			</content>
        </section>
        <section address="SingleMethod">
        	<title>Using a single action method for Ajax and Server binding</title>
        	<content>
        	<para>
        		It is possible to use a single method which will provide data for both Server binding (for the initial request)
        		and Ajax binding (for any further data operations).
        	</para>
        	<list class="ordered">
        		<listItem>
        			Your action method should be decorated with the <codeInline>GridAction</codeInline> and return
        			<codeInline>IGridModel</codeInline> (<codeInline>GridModel&lt;T&gt;</codeInline>) as model.
        			<code lang="C#" title="Controller">
        			<![CDATA[
        			public class HomeController : Controller
        			{
        			    [GridAction]
        			    public ActionResult Index()
						{
							NorthwindDataContext northwind = new NorthwindDataContext();
							return View(new GridModel<Order>
							{
								Data = northwind.Orders
							});
						}
        			}
        			]]>
        			</code>
        		</listItem>
        		<listItem>
        			The view should be strongly typed and use <codeInline>GridModel&lt;Order&gt;</codeInline>:
        			<code lang="XML" title="View">
        			<![CDATA[
        			<%@ Import Namespace="Telerik.Web.Mvc" %>
        			<%@ Page Language="C#"
        					 MasterPageFile="~/Views/Shared/Site.Master" 
        					 Inherits="System.Web.Mvc.ViewPage<GridModel<Order>>" %>
        			]]>
        			</code>
        		</listItem>
        		<listItem>
        			The grid should be configured to use the <codeInline>Index</codeInline> action method:
        			<code lang="C#" title="View">
        			<![CDATA[
        			<%= Html.Telerik().Grid(Model.Data)
					        .Name("Orders")
					        .Ajax(ajax => ajax.Action("Index", "Home"))
					        .Pageable()
					        .Sortable()
					%>
        			]]>
        			</code>
        		</listItem>
        	</list>
        	</content>
        </section>
      </content>
    </section>
    <relatedTopics>
    	<link xlink:href="34ac75d0-5ce3-4bab-ac2a-208c720b4c99" />
    	<link xlink:href="2512933f-ff08-42ea-ba84-e5d2c69cc7f2" />
    	<link xlink:href="4609082c-4319-4274-ae29-d19412f4836f" />
    	<link xlink:href="7872ef72-956e-4cb3-8872-b068f7833def" />
    	<link xlink:href="9cc3719b-22e5-41d8-9dad-22fc203c0b58" />
    </relatedTopics>
  </developerConceptualDocument>
</topic>