<?xml version="1.0" encoding="utf-8"?>
<topic id="34ac75d0-5ce3-4bab-ac2a-208c720b4c99" revisionNumber="1">
  <developerWalkthroughDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
    <introduction>
      <!-- <autoOutline /> -->
      <para>
      	This topic shows how to use the Grid UI component in an <token>Mvc</token> application.
      </para>
    </introduction>
 	<prerequisites>
    	<content>
    		Before proceeding make sure that:
    		<list class="bullet">
    			<listItem>
    				You have all the <link xlink:href="3e4595a7-3c2f-429d-8cdd-a3c638417369">required components</link> installed.
    			</listItem>
    			<listItem>
    				Make sure that your <token>Mvc</token> project refers the <link xlink:href="45f9dbed-12d3-483e-a244-8dfc5f7c3ba8"><token>TelerikMvcDll</token></link>
    				assembly and you have a <codeInline>ScriptRegistrar</codeInline> and a <codeInline>StyleSheetRegistrar</codeInline> defined in your application (either in the master page
    				or in the view where you are going to use the Grid UI component).
    			</listItem>
    			<listItem>
    				All required JavaScript and CSS files are properly copied to your project. This is outlined in <link xlink:href="45f9dbed-12d3-483e-a244-8dfc5f7c3ba8">here - step 4.</link>
    			</listItem>
    		</list>
		</content>
    </prerequisites>
    <section address="Declaration">
    	<title>Grid Declaration and Binding</title>
    	<content>
    	<alert class="important">
    		Linq to Sql and the Northwind database are used throughout the Grid documentation for databinding
    		unless a different database/model is specified. The tutorials require basic Linq to Sql knowledge
    		and assume that a working Northwind datacontext has been set up beforehand.
    	</alert>
    	<para>
    		The following example shows how to bind the Grid UI component to the Orders table of the Northwind database. The default
    		template for a new <token>Mvc</token> application is used.
    	</para>
    	<list class="bullet">
    		<listItem>
    			Modify the <localUri>Index.aspx</localUri> and make it a strongly typed view where the
    			model is <codeInline>IEnumerable&lt;Order&gt;</codeInline>. The <codeInline>Order</codeInline>
    			type is generated by adding the Orders table of the Northwind datacontext.
    			
    			<code lang="xml">
    			<![CDATA[
    			<%@ Page Language="C#" MasterPageFile="~/Views/Shared/Site.Master" 
    			    Inherits="System.Web.Mvc.ViewPage<IEnumerable<Order>>" %>
    			]]>
    			</code>
    			
    			<alert class="note">
    			Having a strongly typed view is not mandatory but makes the Grid declaration easier.
    			</alert>
    		</listItem>
    		<listItem>
    		   Modify the <codeInline>Index</codeInline> action method of the <codeInline>HomeController</codeInline>
    		   to supply the <codeInline>Orders</codeInline> as the model of the view.
    		   <code lang="C#">
    		   <![CDATA[
    		   public ActionResult Index()
               {
                  ViewData["Message"] = "Welcome to ASP.NET MVC!";

                  NorthwindDataContext northwind = new NorthwindDataContext();

                  return View(northwind.Orders);
               }
    		   ]]>
    		   </code>
    		</listItem>
    		<listItem>
    			Paste the following code in <localUri>Index.aspx</localUri>.
    			<code lang="C#">
    			<![CDATA[
			    <%
			        Html.Telerik().Grid(Model)
			            .Name("OrdersGrid")
			            .Columns(colums =>
			            {
			                colums.Add(o => o.OrderID);
			                colums.Add(o => o.ShipAddress);
			                colums.Add(o => o.RequiredDate);
			            })
			            .Pageable()
			            .Sortable()
			            .Render();
			    %>
    			]]>
    			</code>
    		</listItem>
    		<listItem>
    			Build and run your <token>Mvc</token> application. It should show the following:
    			<mediaLink><image xlink:href="GridIntroduction"/></mediaLink>
    		</listItem>
    	</list>
    	<para>
    		Now lets explain the Grid declaration code:
    		<list class="bullet">
				<listItem>
				The <codeEntityReference autoUpgrade="true">M:Telerik.Web.Mvc.UI.ViewComponentFactory.Grid``1(System.Collections.Generic.IEnumerable{``0})</codeEntityReference>
				method is used to create a Grid UI component and set its datasource. In this example we are passing the 
				<codeInline>Model</codeInline> property of the view which is of type <codeInline>IEnumerable&lt;Order&gt;</codeInline>.
				<alert class="note">
					There are other supported ways to databind the grid. Here is an equivalent example:
					<code lang="C#">
					<![CDATA[
					<%
					   Html.Telerik().Grid<Order>()
					       .Name("OrdersGrid")
					       .BindTo(Model)
					       .Columns(columns => { /*code to define the columns*/}})
					       .Pageable()
					       .Sortable()
					       .Render()
					%>
					]]>
					</code>
					Here the <codeInline>BindTo</codeInline> method is used to set the datasource. The type of the 
					data item is specified via the <codeEntityReference autoUpgrade="true">M:Telerik.Web.Mvc.UI.ViewComponentFactory.Grid``1</codeEntityReference>
					method. The Grid componet always requires the type of the data item it is being bound to.
				</alert>
				</listItem>
				<listItem>
				The <codeEntityReference autoUpgrade="true">M:Telerik.Web.Mvc.UI.ViewComponentBuilderBase`2.Name(System.String)</codeEntityReference> is used
				to specify the unique name of the Grid component which is later output as the id HTML attribute. 
				Setting the name is mandatory and exception would be thrown otherwise.
				</listItem>
				<listItem>
					The <codeEntityReference autoUpgrade="true">M:Telerik.Web.Mvc.UI.GridBuilder`1.Columns(System.Action{Telerik.Web.Mvc.UI.GridColumnFactory{`0}})</codeEntityReference> is used
					to define the columns of the Grid component. The <codeEntityReference autoUpgrade="true">M:Telerik.Web.Mvc.UI.GridColumnFactory`1.Add(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})</codeEntityReference> method is used to add a new column to the grid. The expression passed as argument is used
					to specify the property of the data item (the <codeInline>Order</codeInline> class in this case) which the column is bound to.
				</listItem>
				<listItem>
					The <codeEntityReference autoUpgrade="true">M:Telerik.Web.Mvc.UI.GridBuilder`1.Pageable</codeEntityReference> method is used
					to enable paging with default settings (displaying 10 items per page, using the <codeEntityReference autoUpgrade="true">F:Telerik.Web.Mvc.UI.GridPagerStyles.NextPreviousAndNumeric</codeEntityReference> as pager style).
				</listItem>
				<listItem>
				    The <codeEntityReference autoUpgrade="true">M:Telerik.Web.Mvc.UI.GridBuilder`1.Sortable</codeEntityReference> method is used
				    to enable sorting with default settings (sort mode set to <codeEntityReference autoUpgrade="true">F:Telerik.Web.Mvc.UI.GridSortMode.SingleColumn</codeEntityReference>).
				</listItem>
				<listItem>
				Finally the <codeEntityReference autoUpgrade="true">M:Telerik.Web.Mvc.UI.ViewComponentBuilderBase`2.Render</codeEntityReference> method
				outputs the HTML of the Grid component.
				<alert class="important">
					It is mandatory that the <codeInline>Render</codeInline> method is called when using <codeInline>&lt;% Html.Telerik().Grid() %&gt;</codeInline>. If not
					the component will not output any HTML. If using <codeInline>&lt;%= Html.Telerik().Grid() %&gt;</codeInline> you should
					not use the <codeInline>Render</codeInline> method - the Grid component will be automatically rendered. However when using <codeInline>&lt;%= %&gt;</codeInline>
					you cannot define templates which use <codeInline>&lt;% %&gt;</codeInline> blocks.
				</alert>
				</listItem>
    		</list>
		</para>
    	</content>
    </section>
    <relatedTopics>
    	<link xlink:href="2512933f-ff08-42ea-ba84-e5d2c69cc7f2" />
    	<link xlink:href="f526622b-542e-4eb6-a831-c358a590c495" />
    	<link xlink:href="4609082c-4319-4274-ae29-d19412f4836f" />
    	<link xlink:href="7872ef72-956e-4cb3-8872-b068f7833def" />
    	<link xlink:href="42427fad-1e7b-4c05-afea-e088bbf54517" />
    	<link xlink:href="669182c9-f8cb-490d-8aed-b3c8c5edd312" />
    	<link xlink:href="9cc3719b-22e5-41d8-9dad-22fc203c0b58" />
    	<link xlink:href="de31e81e-857d-49d0-9882-c73fed26f0fa" />
	</relatedTopics>
  </developerWalkthroughDocument>
</topic>