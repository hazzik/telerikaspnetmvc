<%@ Page Title="" Language="C#" MasterPageFile="~/Views/Shared/Site.Master" Inherits="System.Web.Mvc.ViewPage<IEnumerable<Telerik.Web.Mvc.JavaScriptTest.Customer>>" %>

<asp:Content ID="Content1" ContentPlaceHolderID="MainContent" runat="server">
    <h2>Layout</h2>
    
    <%= Html.Telerik().Grid(Model).Name("AutoGeneratedColumns")
            .Pageable() %>
    
    <%= Html.Telerik().Grid(Model).Name("AutoGeneratedColumnsWithScrolling")
            .Scrollable()
            .Pageable()%>
    
    <%= Html.Telerik().Grid(Model).Name("ManyColumns")
            .Columns(columns => {
                columns.Bound(c => c.Name);
                columns.Bound(c => c.Name);
                columns.Bound(c => c.Name);
                columns.Bound(c => c.Name);
                columns.Bound(c => c.Name);
                columns.Bound(c => c.Name);
                columns.Bound(c => c.Name);
                columns.Bound(c => c.Name);
                columns.Bound(c => c.Name);
                columns.Bound(c => c.Name);
                columns.Bound(c => c.Name);
                columns.Bound(c => c.Name);
                columns.Bound(c => c.Name);
                columns.Bound(c => c.Name);
                columns.Bound(c => c.Name);                
            })
            .Scrollable()
            .Pageable()%>
    
    <%= Html.Telerik().Grid(Model).Name("Grouping")
            .Groupable(g => g.Groups(c => c.Add(x => x.Name)))
            .DataBinding(binding => binding.Ajax().Select("GroupingAjax", "Grid"))
            .Pageable() %>
    
    
    <%= Html.Telerik().Grid(Model).Name("Grouping_active")
            .Groupable(g => g.Groups(c => c.Add(x => x.Name)))
            .DataBinding(binding => binding.Ajax().Select("GroupingAjax", "Grid"))
            .Pageable() %>
    
    <%= Html.Telerik().Grid(Model).Name("GroupingWithScrolling")
            .Groupable(g => g.Groups(c => c.Add(x => x.Name)))
            .DataBinding(binding => binding.Ajax().Select("GroupingAjax", "Grid"))
            .Scrollable()
            .Pageable() %>
    
    <%= Html.Telerik().Grid(Model).Name("GroupingWithScrolling_active")
            .Groupable(g => g.Groups(c => c.Add(x => x.Name)))
            .DataBinding(binding => binding.Ajax().Select("GroupingAjax", "Grid"))
            .Scrollable()
            .Pageable() %>
    
    <%= Html.Telerik().Grid(Model).Name("Editing")
            .DataKeys(conf => conf.Add(x => x.Name))
            .DataBinding(binding => binding.Ajax().Select("GroupingAjax", "Dummy").Insert("Insert", "Dummy").Delete("Delete", "Dummy").Update("Update", "Dummy"))
            .Columns(columns =>
            {
                columns.Bound(c => c.Name);
                columns.Bound(c => c.BirthDate);
                columns.Bound(c => c.Active);
                columns.Command(conf =>
                {
                    conf.Edit();
                    conf.Delete();
                });
            })
            .Pageable() %>
    
    <%= Html.Telerik().Grid(Model).Name("Editing_active")
            .DataKeys(conf => conf.Add(x => x.Name))
            .DataBinding(binding => binding.Ajax().Select("Select", "Dummy").Insert("Insert", "Dummy").Delete("Delete", "Dummy").Update("Update", "Dummy"))
            .Columns(columns =>
            {
                columns.Bound(c => c.Name);
                columns.Bound(c => c.BirthDate);
                columns.Bound(c => c.Active);
                columns.Command(conf =>
                {
                    conf.Edit();
                    conf.Delete();
                });
            })
            .Pageable() %>
    
    <%= Html.Telerik().Grid(Model).Name("EditingWithScrolling")
            .DataKeys(conf => conf.Add(x => x.Name))
            .DataBinding(binding => binding.Ajax().Select("Select", "Dummy").Insert("Insert", "Dummy").Delete("Delete", "Dummy").Update("Update", "Dummy"))
            .Columns(columns =>
            {
                columns.Bound(c => c.Name);
                columns.Bound(c => c.BirthDate);
                columns.Bound(c => c.Active);
                columns.Command(conf => {
                    conf.Edit();
                    conf.Delete();
                });
            })
            .Scrollable()
            .Pageable() %>
    
    <%= Html.Telerik().Grid(Model).Name("GroupingWithEditingAndScrolling")
            .Groupable(g => g.Groups(c => c.Add(x => x.Name)))
            .DataKeys(conf => conf.Add(x => x.Name))
            .DataBinding(binding => binding.Ajax().Select("GroupingAjax", "Grid").Insert("Insert", "Dummy").Delete("Delete", "Dummy").Update("Update", "Dummy"))
            .Columns(columns =>
            {
                columns.Bound(c => c.Name);
                columns.Bound(c => c.BirthDate);
                columns.Bound(c => c.Active);
                columns.Command(conf => {
                    conf.Edit();
                    conf.Delete();
                });
            })
            .Scrollable()
            .Pageable() %>

    <script type="text/javascript">
        
        function getGrid(selector) {
            return $(selector).data("tGrid");
        }
        
        function isSyncedLayout(selector) {
            var $grid = $(selector);
            
            var headerCells = $grid.find('.t-header');
            var firstRowCells = $grid.find('.t-grid-content tbody tr:not(.t-grouping-row)').eq(0).find('td');
            
            if (firstRowCells.length == 0)
                firstRowCells = $grid.find('tbody tr:not(.t-grouping-row)').eq(0).find('td');
            
            if (firstRowCells.hasClass('t-edit-container'))
                firstRowCells = firstRowCells.find('td');
            
            return headerCells
                .filter(function(index) {
                   return this.offsetWidth == firstRowCells[index].offsetWidth;
                }).length == headerCells.length;
        }
        
        /* initial layout tests */

        function test_AutoGeneratedColumns_initial_layout_is_synced() {
            assertTrue(isSyncedLayout('#AutoGeneratedColumns'));
        }

        function test_AutoGeneratedColumnsWithScrolling_initial_layout_is_synced() {
            assertTrue(isSyncedLayout('#AutoGeneratedColumnsWithScrolling'));
        }

        function test_Grouping_initial_layout_is_synced() {
            assertTrue(isSyncedLayout('#Grouping'));
        }

        function test_GroupingWithScrolling_initial_layout_is_synced() {
            assertTrue(isSyncedLayout('#GroupingWithScrolling'));
        }

        function test_Editing_initial_layout_is_synced() {
            assertTrue(isSyncedLayout('#Editing'));
        }

        function test_EditingWithScrolling_initial_layout_is_synced() {
            assertTrue(isSyncedLayout('#EditingWithScrolling'));
        }

        function test_GroupingWithEditingAndScrolling_initial_layout_is_synced() {
            assertTrue(isSyncedLayout('#GroupingWithEditingAndScrolling'));
        }
        
        /* ungrouping layout tests */
        
        function test_Grouping_layout_after_ungroup_is_synced() {
            var grid = getGrid('#Grouping_active');
            
            grid.unGroup('Name');
            grid.normalizeColumns();
            
            assertTrue(isSyncedLayout('#Grouping_active'));
        }

    </script>

</asp:Content>
